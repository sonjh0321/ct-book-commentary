"""
문제1
    리스트와 비슷하게 객체들의 순서를 가지고 보관하고 있는 데이터 타입. 단 리스트와 달리 생성 이후 수정 불가능
    괄호와 쉼표를 사용해서 나타낼 수 있음.
    (1, 2, 3, 4)
"""

"""
문제2
    error
"""

"""
문제3
    만들어야 하는 프로그램의 요구사항에 따라 다름.
    그러나 무언가 불변 집합이 필요하다면 리스트보다 튜플이 사용되는 경향이 있음.
"""

"""
문제4
    수학에서 말하는 집합과 동일한 타입. 집합 연산을 지원함.
    수학적 집합과 다른 점은 동일한 값의 원소를 중복해서 넣을 수 없음. 넣어도 자동으로 삭제됨.
    대괄호를 사용해서 나타냄. {1, 2, 3}
"""

"""
문제5
    set()
"""

"""
문제6
    key와 value가 쌍을 이뤄서 객체가 저장되는 구조의 타입.
    대괄호를 사용하되, key:value, 형식으로 값을 저장함. key와 value에는 모든 객체가 들어갈 수 있으나, 한 딕셔너리 안에 key는 중복되어서는 안 됨.
    {'key':'value', 'key2':'value2'}
"""

"""
문제7
    1) len(key_val)
    2) list(key_val.keys())
    3) True if 'k1' in key_val is not None else False
    4) True if 'k2' not in key_val is not None else False
"""

"""
문제8
    list()
    tuple()
    set()
    dict()
"""

"""
문제9
    리스트: 순서를 가지고 있으며 유연하게 사용할 수 있다.
    튜플: 리스트보다 안정성을 중요시 할 때 사용할 수 있다.
    집합: 특수한 연산을 수행할 때 유용하다.
    딕셔너리: mapping 관계가 필요할 때 유용하다.
"""
